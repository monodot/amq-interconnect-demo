kind: Template
apiVersion: v1
metadata:
  name: rhte-amq-interconnect-basic
  annotations:
    description: Application template for Red Hat AMQ Interconnect Router.
    iconClass: icon-amq
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: messaging,amq
    openshift.io/display-name: Red Hat AMQ Interconnect Router 1.x with Route
labels:
  template: rhte-amq-interconnect-demo
message: A new messaging service has been created in your project.
parameters:
- displayName: Application Name
  description: The name of the application.
  name: APPLICATION_NAME
  value: amq-interconnect
  required: true
- description: Router Image
  displayName: Image
  name: IMAGE
  required: true
  value: registry.redhat.io/amq7/amq-interconnect:1.3
- displayName: Broker Secret Name
  description: Secret containing broker client certificates
  name: BROKER_CERTS_SECRET
  required: true
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      description: The router's AMQP port.
      service.alpha.openshift.io/serving-cert-secret-name: ${APPLICATION_NAME}-cert
  spec:
    ports:
    - port: 5672
      name: amqp
      targetPort: 5672
    - port: 5671
      name: amqps
      targetPort: 5671
    - port: 8672
      name: http
      targetPort: 8672
    - port: 55672
      name: inter-router
      targetPort: 55672
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        maxSurge: 0
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
          app: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: ${APPLICATION_NAME}
        terminationGracePeriodSeconds: 60
        containers:
        - name: "${APPLICATION_NAME}"
          ports:
          - name: amqp
            containerPort: 5672
            protocol: TCP
          - name: amqps
            containerPort: 5671
            protocol: TCP
          - name: http
            containerPort: 8672
            protocol: TCP
          - name: inter
            containerPort: 55672
            protocol: TCP
          env:
          - name: APPLICATION_NAME
            value: "${APPLICATION_NAME}"
          - name: QDROUTERD_CONF
            value: "/etc/qpid-dispatch/qdrouterd.conf"
          - name: QDROUTERD_AUTO_MESH_DISCOVERY
            value: "QUERY"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          image: ${IMAGE}
          volumeMounts:
          - name: certs
            readOnly: true
            mountPath: /etc/qpid-dispatch-certs/
          - name: config-volume
            mountPath: /etc/qpid-dispatch/
          - name: broker-client-secrets
            mountPath: /etc/broker-client-certs/
          terminationGracePeriodSeconds: 60
          readinessProbe:
            httpGet:
              path: /
              port: 8672
          livenessProbe:
            httpGet:
              path: /
              port: 8672
          resources:
            requests:
              memory: 256Mi
            limits:
              memory: 1Gi
        volumes:
        - name: certs
          secret:
            secretName: ${APPLICATION_NAME}-cert
        - name: config-volume
          configMap:
            name: ${APPLICATION_NAME}
        - name: broker-client-secrets
          secret:
            secretName: ${BROKER_CERTS_SECRET}
        imagePullPolicy: Always
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
- kind: RoleBinding
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-view
    labels:
      app: "${APPLICATION_NAME}"
  subjects:
  - kind: ServiceAccount
    name: ${APPLICATION_NAME}
  roleRef:
    name: "view"
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: "${APPLICATION_NAME}"
    name: ${APPLICATION_NAME}-console
  spec:
    port:
      targetPort: 8672
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}-amqp
  spec:
    port:
      targetPort: 5672
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
